"use strict";(self.webpackChunkagridocs=self.webpackChunkagridocs||[]).push([[51],{5017:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>h,default:()=>m,frontMatter:()=>c,metadata:()=>p,toc:()=>x});var s=i(5893),t=i(1151);const o=i.p+"assets/images/hash-e15fe29a0e734e960883aa0dfeb14744.png",r=i.p+"assets/images/plus-55664dca0ca7351c2ec5d429f66366f5.png",l=i.p+"assets/images/cross-cf23c36640152e8c1849dab75e384204.png",a=i.p+"assets/images/gourd-9a2bf7724048196da3a9b193d4f885ec.png",d=i.p+"assets/images/rhombus-caf2e856b0650b4c67d3199d6543e23e.png",c={},h="Plant",p={id:"customization/plant",title:"Plant",description:"This page will guide you through the process of creating a custom plant for AgriCraft.",source:"@site/docs/customization/plant.mdx",sourceDirName:"customization",slug:"/customization/plant",permalink:"/docs/customization/plant",draft:!1,unlisted:!1,editUrl:"https://github.com/AgriCraft/agricraft.github.io/tree/main/docs/customization/plant.mdx",tags:[],version:"current",frontMatter:{},sidebar:"customizationSidebar",previous:{title:"AgriCraft Customization",permalink:"/docs/customization/"},next:{title:"Mutation",permalink:"/docs/customization/mutation"}},u={},x=[{value:"Datapack",id:"datapack",level:2},{value:"Creating a simple plant",id:"creating-a-simple-plant",level:3},{value:"Adding plant products",id:"adding-plant-products",level:3},{value:"Adding seeds",id:"adding-seeds",level:3},{value:"Specifying soil humidity, acidity and nutrients",id:"specifying-soil-humidity-acidity-and-nutrients",level:3},{value:"How the soil conditions are used",id:"how-the-soil-conditions-are-used",level:4},{value:"How to set a specific soil for the plant?",id:"how-to-set-a-specific-soil-for-the-plant",level:4},{value:"How to allow other soils after a specific plant strength?",id:"how-to-allow-other-soils-after-a-specific-plant-strength",level:4},{value:"Adding additional requirements",id:"adding-additional-requirements",level:3},{value:"Biome and dimension",id:"biome-and-dimension",level:4},{value:"Season",id:"season",level:4},{value:"Block conditions",id:"block-conditions",level:4},{value:"Fluid condition",id:"fluid-condition",level:4},{value:"Adding modifiers",id:"adding-modifiers",level:3},{value:"Available modifiers",id:"available-modifiers",level:4},{value:"Adding particle effects",id:"adding-particle-effects",level:3},{value:"Resourcepack",id:"resourcepack",level:2},{value:"Crop Models",id:"crop-models",level:3},{value:"Seed models",id:"seed-models",level:3},{value:"Textures",id:"textures",level:3},{value:"Translation",id:"translation",level:3}];function j(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"plant",children:"Plant"}),"\n",(0,s.jsx)(n.p,{children:"This page will guide you through the process of creating a custom plant for AgriCraft."}),"\n",(0,s.jsxs)(n.p,{children:["Before we start, we have to choose a resource location for the plant.\nWe are creating a tomato plant, so let's use ",(0,s.jsx)(n.code,{children:"tuto:tomato"})," as the plant's resource location."]}),"\n",(0,s.jsx)(n.p,{children:"This guide is split in two parts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Datapack"}),": defines the behaviour of the plant"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resourcepack"}),": defines how the plant is rendered"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"datapack",children:"Datapack"}),"\n",(0,s.jsx)(n.p,{children:"The data part consists of only one json file defining the plant.\nBelow is the location of the file."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'data\n \u2514\u2500tuto  # the namespace of the resource location of your plant ("tuto" here) which is also the id of your datapack\n    \u2514\u2500agricraft\n       \u2514\u2500plants  # agricraft/plants is the folder used by agricraft to load plants in the game\n          \u2514\u2500tomato.json  # The name of the file must match the id of your plant ("tomato" here)\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"#",title:"TODO: @Ketheroth add back this when mystical agriculture compat",children:"//"}),"  # (todo: primer for agricraft 3.1.0 json to 3.2.0 json)"]}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-simple-plant",children:"Creating a simple plant"}),"\n",(0,s.jsx)(n.p,{children:"First, let's create a simple plant. Every plant requires the following fields:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mods"}),": list of mods required to load this plant. ",(0,s.jsx)(n.strong,{children:"Currently not used"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"seeds"}),": list of items that can be used as a seed for this plant. Note that AgriCraft will always generate it's own seed for the plant. More information about adding seeds ",(0,s.jsx)(n.a,{href:"#Adding-seeds",children:"can be found below"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stages"}),": list of growth stages for this plant. Every stage should be a number corresponding to the height of the plant in pixels."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"harvest_stage"}),": growth stage that the plant will have after it gets harvested."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"growth_chance"}),": chance the plant has of growing on a random tick."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"growth_bonus"}),": chance the plant has of growing bonus on a random tick."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cloneable"}),": determines if the plant can be cloned."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"spread_chance"}),": spread chance of the plant on clone."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"requirement"}),": an object containing plant's requirements:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"soil_humidity"}),", ",(0,s.jsx)(n.code,{children:"soil_acidity"})," and ",(0,s.jsx)(n.code,{children:"soil_nutrients"}),": humidity, acidity and nutrients of the soil required for the plant to grow. An in-depth explanation ",(0,s.jsx)(n.a,{href:"#Specifying-soil-humidity-acidity-and-nutrients",children:"is provided below"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"min_light"}),": minimum light required for the plant to grow."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_light"}),": maximum light required for the plant to grow."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"light_tolerance_factor"}),": light tolerance of the plant. For each level of plant strength, ",(0,s.jsx)(n.code,{children:"min_light"})," decreases and ",(0,s.jsx)(n.code,{children:"max_light"})," increases by the given value."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Other than the fields mentioned above, all fields are considered optional."}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of a simple plant that grows on farmland and has the same growth stages as wheat:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "mods": [],\n  "seeds": [],\n  "stages": [\n    2,\n    4,\n    6,\n    8,\n    10,\n    12,\n    14,\n    16\n  ],\n  "harvest_stage": 4,\n  "growth_chance": 0.75,\n  "growth_bonus": 0.025,\n  "cloneable": true,\n  "spread_chance": 0.1,\n  "requirement": {\n    "soil_acidity": {\n      "type": "equal",\n      "tolerance_factor": 0.2,\n      "value": "slightly_acidic"\n    },\n    "soil_humidity": {\n      "type": "equal",\n      "tolerance_factor": 0.15,\n      "value": "wet"\n    },\n    "soil_nutrients": {\n      "type": "equal_or_higher",\n      "tolerance_factor": 0.1,\n      "value": "high"\n    },\n    "min_light": 10,\n    "max_light": 16,\n    "light_tolerance_factor": 0.5\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"adding-plant-products",children:"Adding plant products"}),"\n",(0,s.jsxs)(n.p,{children:["Products are stored in two different arrays: ",(0,s.jsx)(n.code,{children:"products"})," and ",(0,s.jsx)(n.code,{children:"clip_products"}),". Both arrays function similarly, with the key difference being that ",(0,s.jsx)(n.code,{children:"clip_products"})," are only dropped when harvesting with a Clipper."]}),"\n",(0,s.jsx)(n.p,{children:"A product object requires the following fields:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"item"}),": tag or resource location of the item to be produced."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"min"}),": minimum amount that can be dropped."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max"}),": maximum amount that can be dropped."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"chance"}),": chance for this product to be produced."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"required"}),": if set to ",(0,s.jsx)(n.code,{children:"true"}),", the product will exist only if the item is present in the game."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nbt"}),": the NBT that will be added to the item. ",(0,s.jsx)(n.em,{children:"[optional]"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If multiple drops are present in the array, all of the products will be dropped according to the individual ",(0,s.jsx)(n.code,{children:"chance"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of adding potato drops to the plant:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "products": [\n    {\n      "item": "minecraft:potato",\n      "min": 1,\n      "max": 4,\n      "chance": 0.95,\n      "required": true\n    },\n    {\n      "item": "minecraft:poisonous_potato",\n      "min": 1,\n      "max": 2,\n      "chance": 0.02,\n      "required": true\n    }\n  ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"adding-seeds",children:"Adding seeds"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"item"}),": tag or resource location of the item that will be used as a seed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"override_planting"}),": if ",(0,s.jsx)(n.code,{children:"true"}),", default item behaviour will be overridden to place an AgriCraft plant instead."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"grass_drop_chance"}),": chance for this seed to drop when grass is broken."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"seed_drop_chance"}),": chance for this seed to drop when the crop is broken."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"seed_drop_bonus"}),": chance for a second seed to drop when the crop is broken."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nbt"}),": NBT needed for the item to be considered a seed. ",(0,s.jsx)(n.em,{children:"[optional]"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Here's an example of adding potato as a seed for the plant:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "seeds": [\n    {\n      "item": "minecraft:potato",\n      "override_planting": true,\n      "grass_drop_chance": 0.0,\n      "seed_drop_chance": 1.0,\n      "seed_drop_bonus": 0.0\n    }\n  ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"specifying-soil-humidity-acidity-and-nutrients",children:"Specifying soil humidity, acidity and nutrients"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"soil_humidity"}),", ",(0,s.jsx)(n.code,{children:"soil_acidity"})," and ",(0,s.jsx)(n.code,{children:"soil_nutrients"})," requirements consist of the following fields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"}),": can be one of the following:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"equal"}),": the condition of the soil must be equal to the plant condition. If it is higher or lower, the plant will not grow."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"equal_or_lower"}),": the condition of the soil must be equal or lower than the plant condition. If it is higher, the plant will not grow."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"equal_or_hight"}),": the condition of the soil must be equal or higher than the plant condition. If it is lower, the plant will not grow."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"}),": the value of the requirement. See ",(0,s.jsx)(n.a,{href:"/docs/customization/soil#soil-conditions",children:"soil condition values"})," for the possible soil requirements of the plant."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tolerance_factor"}),": broadens the requirement based on plant's strength."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"how-the-soil-conditions-are-used",children:"How the soil conditions are used"}),"\n",(0,s.jsxs)(n.p,{children:["The requirement of the plant is met if the soil value is in the range ",(0,s.jsx)(n.code,{children:"plant_requirement \xb1 (plant_tolerance * plant_strength)"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Example:",(0,s.jsx)(n.br,{}),"\n","Assuming the plant has a strength of 10 and this is its humidity requirement:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "soil_humidity": {\n    "condition": "damp",\n    "type": "equal",\n    "tolerance_factor": 0.2\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"damp"})," has a value of 2 (its index in ",(0,s.jsx)(n.a,{href:"/docs/customization/soil#humidity",children:"this chart"}),").\nThe range of soil humidity for such requirement is ",(0,s.jsx)(n.code,{children:"2 \xb1 (0.2 * 10)"})," which is ",(0,s.jsx)(n.code,{children:"[0, 4]"}),".\nThis means the crop can grow on soils with humidity arid, dry, damp, wet, or watery when its strength is 10."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that if the type of the requirement was ",(0,s.jsx)(n.code,{children:"equal_or_higher"})," the range would have been ",(0,s.jsx)(n.code,{children:"[0, +inf["}),"\nand ",(0,s.jsx)(n.code,{children:"]-inf, 4]"})," if it was ",(0,s.jsx)(n.code,{children:"equal_or_lower"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"how-to-set-a-specific-soil-for-the-plant",children:"How to set a specific soil for the plant?"}),"\n",(0,s.jsxs)(n.p,{children:["For each soil condition, set the same condition value as the soil in the plan requirement, with ",(0,s.jsx)(n.code,{children:"equal"})," for the type and ",(0,s.jsx)(n.code,{children:"0"})," for the tolerance factor."]}),"\n",(0,s.jsx)(n.h4,{id:"how-to-allow-other-soils-after-a-specific-plant-strength",children:"How to allow other soils after a specific plant strength?"}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.a,{href:"/docs/customization/tolerance-calculator",children:"this tool"})," to determine the tolerance factor for each soil condition."]}),"\n",(0,s.jsx)(n.h3,{id:"adding-additional-requirements",children:"Adding additional requirements"}),"\n",(0,s.jsxs)(n.p,{children:["All of the requirements mentioned below have to be added to the ",(0,s.jsx)(n.code,{children:"requirement"})," object you should already have in the plant file."]}),"\n",(0,s.jsx)(n.h4,{id:"biome-and-dimension",children:"Biome and dimension"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"biomes"})," and ",(0,s.jsx)(n.code,{children:"dimensions"})," fields allow you to specify in which biomes or dimensions your plant will or won't grow."]}),"\n",(0,s.jsx)(n.p,{children:"These requirements use the following fields:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"values"}),": a list of biome or dimension resource locations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"blacklist"}),": if ",(0,s.jsx)(n.code,{children:"true"}),", the specified biomes or dimensions will be blacklisted (the plant won't grow in them)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ignore_from_strength"}),": the requirement will be ignored if the strength of the plant is greater or equal to this value. Defaults to 11 (meaning the requirement will never be ignored). ",(0,s.jsx)(n.em,{children:"[optional]"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of a requirement that stops the plant from growing in plains and desert biomes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    "biomes": {\n      "values":  [\n\t\t"minecraft:plains",\n\t\t"minecraft:desert"\n\t  ],\n      "blacklist":  true,\n      "ignore_from_strength":  11\n    }\n'})}),"\n",(0,s.jsx)(n.h4,{id:"season",children:"Season"}),"\n",(0,s.jsxs)(n.p,{children:["If you are using a mod that adds seasons, you can make your plant grow only during specific seasons. To do this, add a ",(0,s.jsx)(n.code,{children:"seasons"})," field to the ",(0,s.jsx)(n.code,{children:"requirement"}),". It should be a list of all the seasons during which the plant can grow."]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of a requirement that makes the plant grow only during spring and autumn:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    "seasons": [\n      "spring",\n      "autumn"\n    ]\n'})}),"\n",(0,s.jsx)(n.h4,{id:"block-conditions",children:"Block conditions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"block"}),": tag or resource location of the required block."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"strength"}),": the requirement will be ignored if the strength of the plant is greater or equal to this value. Setting it to 11 means the condition will never be ignored."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nbt"}),": NBT that must be included in the block (or block entity). ",(0,s.jsx)(n.em,{children:"[optional]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"states"}),": list of states that must be present in the block. ",(0,s.jsx)(n.em,{children:"[optional]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"amount"}),": the amount of blocks required in the specified range. Defaults to 1. ",(0,s.jsx)(n.em,{children:"[optional]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"min_x"}),", ",(0,s.jsx)(n.code,{children:"min_y"}),", ",(0,s.jsx)(n.code,{children:"min_z"})," and ",(0,s.jsx)(n.code,{children:"max_x"}),", ",(0,s.jsx)(n.code,{children:"max_y"}),", ",(0,s.jsx)(n.code,{children:"max_z"}),": the bounding box, relative to the crop at 0, 0, 0, where the block(s) need to be placed. The bounding box is inclusive. Defaults to ",(0,s.jsx)(n.code,{children:"(0, -2, 0)"}),", ",(0,s.jsx)(n.code,{children:"(0, -2, 0)"}),", meaning the block needs to be placed under the soil. ",(0,s.jsx)(n.em,{children:"[optional]"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of a requirement that makes the plant grow only when there is some kind of a diamond ore under the soil:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    "block_conditions":  [\n      {\n        "block": "#agricraft:ores/diamond",\n        "strength": 11\n      }\n    ]\n'})}),"\n",(0,s.jsx)(n.h4,{id:"fluid-condition",children:"Fluid condition"}),"\n",(0,s.jsxs)(n.p,{children:["Fluid condition can be added with a ",(0,s.jsx)(n.code,{children:"fluid_condition"})," field. The fluid condition object requires the following fields:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fluid"}),": tag or ID of the fluid."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"states"}),": list of states that must be present in the fluid. ",(0,s.jsx)(n.em,{children:"[optional]"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    "fluid_condition": {\n      "fluid": "minecraft:empty",\n      "states": []\n    }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"adding-modifiers",children:"Adding modifiers"}),"\n",(0,s.jsx)(n.p,{children:"Modifiers allow you to further customize your plants by adding special effects, such as actions during harvest or effects on collision."}),"\n",(0,s.jsxs)(n.p,{children:["To add a modifier, add a ",(0,s.jsx)(n.code,{children:"modifiers"})," section to your plant file. It should contain an array of all the modifiers you want to use."]}),"\n",(0,s.jsxs)(n.p,{children:["Each modifier should have an ",(0,s.jsx)(n.code,{children:"id"}),". Additionally, some modifiers require a ",(0,s.jsx)(n.code,{children:"value"})," to further specify the action. Here you can see an example of summoning a zombie on plant harvest:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'    {\n      "id": "agricraft:summon",\n      "value": "minecraft:zombie"\n    }\n'})}),"\n",(0,s.jsx)(n.p,{children:"Since modifiers are stored in an array, you can have multiple modifiers at the same time:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "modifiers": [\n\t{\n\t  "id": "agricraft:brightness"\n\t},\n    {\n      "id": "agricraft:summon",\n      "value": "minecraft:zombie"\n    }\n  ]\n'})}),"\n",(0,s.jsx)(n.h4,{id:"available-modifiers",children:"Available modifiers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:brightness"}),": crop will emit light."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:burn"}),": crop will burn colliding entities."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:bushy"}),": crop will slow down colliding entities."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:experience"}),": crop will drop experience on harvest."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:fungus"}),": crop will grow a fungus tree when bonemealed at max growth.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," specifies the resource location of the fungus that will be grown."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:poisoning"}),": crop will apply the poison effect to colliding entities."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:redstone"}),": crop will emit redstone signal."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:summon"}),": crop will summon an entity on harvest.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," specifies the resource location of the mob that will be summoned."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:thorns"}),": crop will hurt colliding entities (like a cactus)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:tree"}),": crop will grow a tree when bonemealed at max growth.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," specifies the resource location of the sapling that will be grown."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agricraft:withering"}),": crop will apply the wither effect to colliding entities."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"adding-particle-effects",children:"Adding particle effects"}),"\n",(0,s.jsxs)(n.p,{children:["To make particles spawn around your plant, add a ",(0,s.jsx)(n.code,{children:"particle_effects"})," section to its file. It should contain an array of all the particle effects that you want to add."]}),"\n",(0,s.jsx)(n.p,{children:"Each particle effect requires the following fields:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"probability"}),": chance for the particle to spawn. ",(0,s.jsx)(n.em,{children:"[range 0.0-1.0]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stages"}),": list of plant stages at which the particle can spawn."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"particle"}),": resource location of the particle that will spawn."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"delta_x"}),", ",(0,s.jsx)(n.code,{children:"delta_y"})," and ",(0,s.jsx)(n.code,{children:"delta_z"}),": these represent how far from the center of the block the particles will spawn in the given direction."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of adding smoke particles to a fully-grown plant:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'  "particle_effects": [\n    {\n      "probability": 0.4,\n      "stages": [\n        7\n      ],\n      "particle": "minecraft:smoke",\n      "delta_x": 0.3,\n      "delta_y": 0.4,\n      "delta_z": 0.3\n    }\n  ]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"resourcepack",children:"Resourcepack"}),"\n",(0,s.jsx)(n.p,{children:"The resource part consists of multiple json file defining how the plant will be rendered in the game.\nThis is probably the most work you'll have to do.\nBelow is the location of each file, according to the plant json define above."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"assets\n \u2514\u2500tuto\n    \u251c\u2500lang\n    \u2502  \u2514\u2500en_us.json\n    \u251c\u2500models\n    \u2502  \u251c\u2500crop\n    \u2502  \u2502  \u251c\u2500tomato_stage0.json\n    \u2502  \u2502  \u251c\u2500tomato_stage1.json\n    \u2502  \u2502  \u251c\u2500tomato_stage2.json\n    \u2502  \u2502  \u251c\u2500tomato_stage3.json\n    \u2502  \u2502  \u251c\u2500tomato_stage4.json\n    \u2502  \u2502  \u251c\u2500tomato_stage5.json\n    \u2502  \u2502  \u251c\u2500tomato_stage6.json\n    \u2502  \u2502  \u2514\u2500tomato_stage7.json\n    \u2502  \u2514\u2500seed\n    \u2502     \u2514\u2500tomato.json\n    \u2514\u2500textures  // the textures files are optionals, they depends on whatever textures you used in the models\n       \u251c\u2500plant\n       \u2502  \u251c\u2500tomato_stage0.png\n       \u2502  \u251c\u2500tomato_stage1.png\n       \u2502  \u251c\u2500tomato_stage2.png\n       \u2502  \u251c\u2500tomato_stage3.png\n       \u2502  \u251c\u2500tomato_stage4.png\n       \u2502  \u251c\u2500tomato_stage5.png\n       \u2502  \u251c\u2500tomato_stage6.png\n       \u2502  \u2514\u2500tomato_stage7.png\n       \u2514\u2500seed\n          \u2514\u2500tomato.png\n"})}),"\n",(0,s.jsx)(n.h3,{id:"crop-models",children:"Crop Models"}),"\n",(0,s.jsxs)(n.p,{children:["AgriCraft will try to load a model for the plant block to its resource location and its growth stage.\nIt will load the plant models in ",(0,s.jsx)(n.code,{children:"<namespace>/models/crop/<id>_stage<stage>.json"})," where the namespace and id correspond\nto the namespace and the id of the plant (",(0,s.jsx)(n.code,{children:"tuto"})," and ",(0,s.jsx)(n.code,{children:"tomato"})," in our example) and stage correspond to the growth stage of the plant.\nThis means you have to define one model per growth stage you defined in your plant json."]}),"\n",(0,s.jsx)(n.p,{children:"You can use whatever model you want for your plant, but AgriCraft provides multiple default models for ease of use and are described as follows:"}),"\n","\n","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"crop_hash"}),": 4 faces parallel with the block faces, similar to Vanilla wheat."]}),"\n"]}),"\n",(0,s.jsx)("img",{alt:"hash crop image",src:o,style:{display:"block",margin:"auto",width:"700px"}}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "parent": "agricraft:crop/crop_hash",\n  "textures": {\n    "crop": "<your_crop_texture_here>"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tall_crop_hash"}),": like ",(0,s.jsx)(n.code,{children:"crop_hash"})," but 2 blocks high"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "parent": "agricraft:crop/tall_crop_hash",\n  "textures": {\n    "crop": "<your_crop_texture_here>",\n    "crop_top": "<your_crop_top_texture_here>"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"crop_cross"}),":  2 faces along the diagonals, similar to Vanilla flowers."]}),"\n"]}),"\n",(0,s.jsx)("img",{alt:"cross crop image",src:l,style:{display:"block",margin:"auto",width:"700px"}}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "parent": "agricraft:crop/crop_cross",\n  "textures": {\n    "crop": "<your_crop_texture_here>"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"crop_plus"}),": Similar to cross, but instead 4 crosses at each crop stick."]}),"\n"]}),"\n",(0,s.jsx)("img",{alt:"plus crop image",src:r,style:{display:"block",margin:"auto",width:"700px"}}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "parent": "agricraft:crop/crop_plus",\n  "textures": {\n    "crop": "<your_crop_texture_here>"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tall_crop_plus"}),": like ",(0,s.jsx)(n.code,{children:"crop_plus"})," but 2 blocks high"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "parent": "agricraft:crop/tall_crop_plus",\n  "textures": {\n    "crop": "<your_crop_texture_here>",\n    "crop_top": "<your_crop_top_texture_here>"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"crop_gourd"}),": i.e. for pumpkins and melons: renders a hash pattern with the ",(0,s.jsx)(n.code,{children:"crop"})," texture, and a small gourd with the ",(0,s.jsx)(n.code,{children:"gourd"})," texture."]}),"\n"]}),"\n",(0,s.jsx)("img",{alt:"gourd crop image",src:a,style:{display:"block",margin:"auto",width:"700px"}}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "parent": "agricraft:crop/crop_gourd",\n  "textures": {\n    "crop": "<your_crop_texture_here>",\n    "gourd": "<your_gourd_texture_here>"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"crop_rhombus"}),": 4 faces spanning between the centers of the block faces, mainly used for weeds."]}),"\n"]}),"\n",(0,s.jsx)("img",{alt:"rhombus crop image",src:d,style:{display:"block",margin:"auto",width:"700px"}}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "parent": "agricraft:crop/crop_rhombus",\n  "textures": {\n    "crop": "<your_crop_texture_here>"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"seed-models",children:"Seed models"}),"\n",(0,s.jsxs)(n.p,{children:["AgriCraft will try to load the model for the default plant seed from the path ",(0,s.jsx)(n.code,{children:"<namespace>/models/seed/<id>.json"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"textures",children:"Textures"}),"\n",(0,s.jsxs)(n.p,{children:["AgriCraft will also load textures from ",(0,s.jsx)(n.code,{children:"textures/plant/"})," and ",(0,s.jsx)(n.code,{children:"textures/seed/"})," too, so you can put your plant and seed textures there if you want."]}),"\n",(0,s.jsx)(n.h3,{id:"translation",children:"Translation"}),"\n",(0,s.jsx)(n.p,{children:"AgriCraft will localize the name of the plant, its seed and its description according to the following keys:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"plant.agricraft.<namespace>.<id>"}),": the name of the plant"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"seed.agricraft.<namespace>.<id>"}),": the name of the seed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"description.agricraft.<namespace>.<id>"}),": the description of the plant"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>r});var s=i(7294);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);